/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://code.google.com/p/google-apis-client-generator/
 * (build: 2014-04-15 19:10:39 UTC)
 * on 2014-05-17 at 21:07:50 UTC 
 * Modify at your own risk.
 */

package com.appspot.patota_hackathon.api;

/**
 * Service definition for Api (v1).
 *
 * <p>
 * This is an API
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link ApiRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Api extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.18.0-rc of the api library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://patota-hackathon.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "api/v1/";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Api(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Api(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the PatotaAPI collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Api api = new Api(...);}
   *   {@code Api.PatotaAPI.List request = api.patotaAPI().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public PatotaAPI patotaAPI() {
    return new PatotaAPI();
  }

  /**
   * The "patotaAPI" collection of methods.
   */
  public class PatotaAPI {

    /**
     * Create a request for the method "patotaAPI.acceptChallenge".
     *
     * This request holds the parameters needed by the api server.  After setting any optional
     * parameters, call the {@link AcceptChallenge#execute()} method to invoke the remote operation.
     *
     * @param groupId
     * @param challengeId
     * @return the request
     */
    public AcceptChallenge acceptChallenge(java.lang.Long groupId, java.lang.Long challengeId) throws java.io.IOException {
      AcceptChallenge result = new AcceptChallenge(groupId, challengeId);
      initialize(result);
      return result;
    }

    public class AcceptChallenge extends ApiRequest<com.appspot.patota_hackathon.api.model.Challenge> {

      private static final String REST_PATH = "acceptChallenge/{groupId}/{challengeId}";

      /**
       * Create a request for the method "patotaAPI.acceptChallenge".
       *
       * This request holds the parameters needed by the the api server.  After setting any optional
       * parameters, call the {@link AcceptChallenge#execute()} method to invoke the remote operation.
       * <p> {@link AcceptChallenge#initialize(com.google.api.client.googleapis.services.AbstractGoogleC
       * lientRequest)} must be called to initialize this instance immediately after invoking the
       * constructor. </p>
       *
       * @param groupId
       * @param challengeId
       * @since 1.13
       */
      protected AcceptChallenge(java.lang.Long groupId, java.lang.Long challengeId) {
        super(Api.this, "POST", REST_PATH, null, com.appspot.patota_hackathon.api.model.Challenge.class);
        this.groupId = com.google.api.client.util.Preconditions.checkNotNull(groupId, "Required parameter groupId must be specified.");
        this.challengeId = com.google.api.client.util.Preconditions.checkNotNull(challengeId, "Required parameter challengeId must be specified.");
      }

      @Override
      public AcceptChallenge setAlt(java.lang.String alt) {
        return (AcceptChallenge) super.setAlt(alt);
      }

      @Override
      public AcceptChallenge setFields(java.lang.String fields) {
        return (AcceptChallenge) super.setFields(fields);
      }

      @Override
      public AcceptChallenge setKey(java.lang.String key) {
        return (AcceptChallenge) super.setKey(key);
      }

      @Override
      public AcceptChallenge setOauthToken(java.lang.String oauthToken) {
        return (AcceptChallenge) super.setOauthToken(oauthToken);
      }

      @Override
      public AcceptChallenge setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (AcceptChallenge) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public AcceptChallenge setQuotaUser(java.lang.String quotaUser) {
        return (AcceptChallenge) super.setQuotaUser(quotaUser);
      }

      @Override
      public AcceptChallenge setUserIp(java.lang.String userIp) {
        return (AcceptChallenge) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long groupId;

      /**

       */
      public java.lang.Long getGroupId() {
        return groupId;
      }

      public AcceptChallenge setGroupId(java.lang.Long groupId) {
        this.groupId = groupId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Long challengeId;

      /**

       */
      public java.lang.Long getChallengeId() {
        return challengeId;
      }

      public AcceptChallenge setChallengeId(java.lang.Long challengeId) {
        this.challengeId = challengeId;
        return this;
      }

      @Override
      public AcceptChallenge set(String parameterName, Object value) {
        return (AcceptChallenge) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "patotaAPI.addChallenge".
     *
     * This request holds the parameters needed by the api server.  After setting any optional
     * parameters, call the {@link AddChallenge#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.appspot.patota_hackathon.api.model.Challenge}
     * @return the request
     */
    public AddChallenge addChallenge(com.appspot.patota_hackathon.api.model.Challenge content) throws java.io.IOException {
      AddChallenge result = new AddChallenge(content);
      initialize(result);
      return result;
    }

    public class AddChallenge extends ApiRequest<com.appspot.patota_hackathon.api.model.Challenge> {

      private static final String REST_PATH = "addChallenge";

      /**
       * Create a request for the method "patotaAPI.addChallenge".
       *
       * This request holds the parameters needed by the the api server.  After setting any optional
       * parameters, call the {@link AddChallenge#execute()} method to invoke the remote operation. <p>
       * {@link
       * AddChallenge#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.appspot.patota_hackathon.api.model.Challenge}
       * @since 1.13
       */
      protected AddChallenge(com.appspot.patota_hackathon.api.model.Challenge content) {
        super(Api.this, "POST", REST_PATH, content, com.appspot.patota_hackathon.api.model.Challenge.class);
      }

      @Override
      public AddChallenge setAlt(java.lang.String alt) {
        return (AddChallenge) super.setAlt(alt);
      }

      @Override
      public AddChallenge setFields(java.lang.String fields) {
        return (AddChallenge) super.setFields(fields);
      }

      @Override
      public AddChallenge setKey(java.lang.String key) {
        return (AddChallenge) super.setKey(key);
      }

      @Override
      public AddChallenge setOauthToken(java.lang.String oauthToken) {
        return (AddChallenge) super.setOauthToken(oauthToken);
      }

      @Override
      public AddChallenge setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (AddChallenge) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public AddChallenge setQuotaUser(java.lang.String quotaUser) {
        return (AddChallenge) super.setQuotaUser(quotaUser);
      }

      @Override
      public AddChallenge setUserIp(java.lang.String userIp) {
        return (AddChallenge) super.setUserIp(userIp);
      }

      @Override
      public AddChallenge set(String parameterName, Object value) {
        return (AddChallenge) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "patotaAPI.addEvent".
     *
     * This request holds the parameters needed by the api server.  After setting any optional
     * parameters, call the {@link AddEvent#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.appspot.patota_hackathon.api.model.Event}
     * @return the request
     */
    public AddEvent addEvent(com.appspot.patota_hackathon.api.model.Event content) throws java.io.IOException {
      AddEvent result = new AddEvent(content);
      initialize(result);
      return result;
    }

    public class AddEvent extends ApiRequest<com.appspot.patota_hackathon.api.model.Event> {

      private static final String REST_PATH = "addEvent";

      /**
       * Create a request for the method "patotaAPI.addEvent".
       *
       * This request holds the parameters needed by the the api server.  After setting any optional
       * parameters, call the {@link AddEvent#execute()} method to invoke the remote operation. <p>
       * {@link
       * AddEvent#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.appspot.patota_hackathon.api.model.Event}
       * @since 1.13
       */
      protected AddEvent(com.appspot.patota_hackathon.api.model.Event content) {
        super(Api.this, "POST", REST_PATH, content, com.appspot.patota_hackathon.api.model.Event.class);
      }

      @Override
      public AddEvent setAlt(java.lang.String alt) {
        return (AddEvent) super.setAlt(alt);
      }

      @Override
      public AddEvent setFields(java.lang.String fields) {
        return (AddEvent) super.setFields(fields);
      }

      @Override
      public AddEvent setKey(java.lang.String key) {
        return (AddEvent) super.setKey(key);
      }

      @Override
      public AddEvent setOauthToken(java.lang.String oauthToken) {
        return (AddEvent) super.setOauthToken(oauthToken);
      }

      @Override
      public AddEvent setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (AddEvent) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public AddEvent setQuotaUser(java.lang.String quotaUser) {
        return (AddEvent) super.setQuotaUser(quotaUser);
      }

      @Override
      public AddEvent setUserIp(java.lang.String userIp) {
        return (AddEvent) super.setUserIp(userIp);
      }

      @Override
      public AddEvent set(String parameterName, Object value) {
        return (AddEvent) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "patotaAPI.addMember".
     *
     * This request holds the parameters needed by the api server.  After setting any optional
     * parameters, call the {@link AddMember#execute()} method to invoke the remote operation.
     *
     * @param groupId
     * @param content the {@link com.appspot.patota_hackathon.api.model.GroupMember}
     * @return the request
     */
    public AddMember addMember(java.lang.Long groupId, com.appspot.patota_hackathon.api.model.GroupMember content) throws java.io.IOException {
      AddMember result = new AddMember(groupId, content);
      initialize(result);
      return result;
    }

    public class AddMember extends ApiRequest<Void> {

      private static final String REST_PATH = "addMember/{groupId}";

      /**
       * Create a request for the method "patotaAPI.addMember".
       *
       * This request holds the parameters needed by the the api server.  After setting any optional
       * parameters, call the {@link AddMember#execute()} method to invoke the remote operation. <p>
       * {@link
       * AddMember#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param groupId
       * @param content the {@link com.appspot.patota_hackathon.api.model.GroupMember}
       * @since 1.13
       */
      protected AddMember(java.lang.Long groupId, com.appspot.patota_hackathon.api.model.GroupMember content) {
        super(Api.this, "POST", REST_PATH, content, Void.class);
        this.groupId = com.google.api.client.util.Preconditions.checkNotNull(groupId, "Required parameter groupId must be specified.");
      }

      @Override
      public AddMember setAlt(java.lang.String alt) {
        return (AddMember) super.setAlt(alt);
      }

      @Override
      public AddMember setFields(java.lang.String fields) {
        return (AddMember) super.setFields(fields);
      }

      @Override
      public AddMember setKey(java.lang.String key) {
        return (AddMember) super.setKey(key);
      }

      @Override
      public AddMember setOauthToken(java.lang.String oauthToken) {
        return (AddMember) super.setOauthToken(oauthToken);
      }

      @Override
      public AddMember setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (AddMember) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public AddMember setQuotaUser(java.lang.String quotaUser) {
        return (AddMember) super.setQuotaUser(quotaUser);
      }

      @Override
      public AddMember setUserIp(java.lang.String userIp) {
        return (AddMember) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long groupId;

      /**

       */
      public java.lang.Long getGroupId() {
        return groupId;
      }

      public AddMember setGroupId(java.lang.Long groupId) {
        this.groupId = groupId;
        return this;
      }

      @Override
      public AddMember set(String parameterName, Object value) {
        return (AddMember) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "patotaAPI.allChallenges".
     *
     * This request holds the parameters needed by the api server.  After setting any optional
     * parameters, call the {@link AllChallenges#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public AllChallenges allChallenges() throws java.io.IOException {
      AllChallenges result = new AllChallenges();
      initialize(result);
      return result;
    }

    public class AllChallenges extends ApiRequest<com.appspot.patota_hackathon.api.model.ChallengeBulk> {

      private static final String REST_PATH = "allChallenges";

      /**
       * Create a request for the method "patotaAPI.allChallenges".
       *
       * This request holds the parameters needed by the the api server.  After setting any optional
       * parameters, call the {@link AllChallenges#execute()} method to invoke the remote operation. <p>
       * {@link AllChallenges#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientR
       * equest)} must be called to initialize this instance immediately after invoking the constructor.
       * </p>
       *
       * @since 1.13
       */
      protected AllChallenges() {
        super(Api.this, "POST", REST_PATH, null, com.appspot.patota_hackathon.api.model.ChallengeBulk.class);
      }

      @Override
      public AllChallenges setAlt(java.lang.String alt) {
        return (AllChallenges) super.setAlt(alt);
      }

      @Override
      public AllChallenges setFields(java.lang.String fields) {
        return (AllChallenges) super.setFields(fields);
      }

      @Override
      public AllChallenges setKey(java.lang.String key) {
        return (AllChallenges) super.setKey(key);
      }

      @Override
      public AllChallenges setOauthToken(java.lang.String oauthToken) {
        return (AllChallenges) super.setOauthToken(oauthToken);
      }

      @Override
      public AllChallenges setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (AllChallenges) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public AllChallenges setQuotaUser(java.lang.String quotaUser) {
        return (AllChallenges) super.setQuotaUser(quotaUser);
      }

      @Override
      public AllChallenges setUserIp(java.lang.String userIp) {
        return (AllChallenges) super.setUserIp(userIp);
      }

      @Override
      public AllChallenges set(String parameterName, Object value) {
        return (AllChallenges) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "patotaAPI.allGroups".
     *
     * This request holds the parameters needed by the api server.  After setting any optional
     * parameters, call the {@link AllGroups#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public AllGroups allGroups() throws java.io.IOException {
      AllGroups result = new AllGroups();
      initialize(result);
      return result;
    }

    public class AllGroups extends ApiRequest<com.appspot.patota_hackathon.api.model.GroupBulk> {

      private static final String REST_PATH = "allGroups";

      /**
       * Create a request for the method "patotaAPI.allGroups".
       *
       * This request holds the parameters needed by the the api server.  After setting any optional
       * parameters, call the {@link AllGroups#execute()} method to invoke the remote operation. <p>
       * {@link
       * AllGroups#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected AllGroups() {
        super(Api.this, "POST", REST_PATH, null, com.appspot.patota_hackathon.api.model.GroupBulk.class);
      }

      @Override
      public AllGroups setAlt(java.lang.String alt) {
        return (AllGroups) super.setAlt(alt);
      }

      @Override
      public AllGroups setFields(java.lang.String fields) {
        return (AllGroups) super.setFields(fields);
      }

      @Override
      public AllGroups setKey(java.lang.String key) {
        return (AllGroups) super.setKey(key);
      }

      @Override
      public AllGroups setOauthToken(java.lang.String oauthToken) {
        return (AllGroups) super.setOauthToken(oauthToken);
      }

      @Override
      public AllGroups setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (AllGroups) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public AllGroups setQuotaUser(java.lang.String quotaUser) {
        return (AllGroups) super.setQuotaUser(quotaUser);
      }

      @Override
      public AllGroups setUserIp(java.lang.String userIp) {
        return (AllGroups) super.setUserIp(userIp);
      }

      @Override
      public AllGroups set(String parameterName, Object value) {
        return (AllGroups) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "patotaAPI.getGroup".
     *
     * This request holds the parameters needed by the api server.  After setting any optional
     * parameters, call the {@link GetGroup#execute()} method to invoke the remote operation.
     *
     * @param groupId
     * @return the request
     */
    public GetGroup getGroup(java.lang.Long groupId) throws java.io.IOException {
      GetGroup result = new GetGroup(groupId);
      initialize(result);
      return result;
    }

    public class GetGroup extends ApiRequest<com.appspot.patota_hackathon.api.model.Group> {

      private static final String REST_PATH = "group/{groupId}";

      /**
       * Create a request for the method "patotaAPI.getGroup".
       *
       * This request holds the parameters needed by the the api server.  After setting any optional
       * parameters, call the {@link GetGroup#execute()} method to invoke the remote operation. <p>
       * {@link
       * GetGroup#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param groupId
       * @since 1.13
       */
      protected GetGroup(java.lang.Long groupId) {
        super(Api.this, "GET", REST_PATH, null, com.appspot.patota_hackathon.api.model.Group.class);
        this.groupId = com.google.api.client.util.Preconditions.checkNotNull(groupId, "Required parameter groupId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetGroup setAlt(java.lang.String alt) {
        return (GetGroup) super.setAlt(alt);
      }

      @Override
      public GetGroup setFields(java.lang.String fields) {
        return (GetGroup) super.setFields(fields);
      }

      @Override
      public GetGroup setKey(java.lang.String key) {
        return (GetGroup) super.setKey(key);
      }

      @Override
      public GetGroup setOauthToken(java.lang.String oauthToken) {
        return (GetGroup) super.setOauthToken(oauthToken);
      }

      @Override
      public GetGroup setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetGroup) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetGroup setQuotaUser(java.lang.String quotaUser) {
        return (GetGroup) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetGroup setUserIp(java.lang.String userIp) {
        return (GetGroup) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long groupId;

      /**

       */
      public java.lang.Long getGroupId() {
        return groupId;
      }

      public GetGroup setGroupId(java.lang.Long groupId) {
        this.groupId = groupId;
        return this;
      }

      @Override
      public GetGroup set(String parameterName, Object value) {
        return (GetGroup) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "patotaAPI.insertGroup".
     *
     * This request holds the parameters needed by the api server.  After setting any optional
     * parameters, call the {@link InsertGroup#execute()} method to invoke the remote operation.
     *
     * @param groupName
     * @return the request
     */
    public InsertGroup insertGroup(java.lang.String groupName) throws java.io.IOException {
      InsertGroup result = new InsertGroup(groupName);
      initialize(result);
      return result;
    }

    public class InsertGroup extends ApiRequest<com.appspot.patota_hackathon.api.model.Group> {

      private static final String REST_PATH = "group/{groupName}";

      /**
       * Create a request for the method "patotaAPI.insertGroup".
       *
       * This request holds the parameters needed by the the api server.  After setting any optional
       * parameters, call the {@link InsertGroup#execute()} method to invoke the remote operation. <p>
       * {@link
       * InsertGroup#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param groupName
       * @since 1.13
       */
      protected InsertGroup(java.lang.String groupName) {
        super(Api.this, "POST", REST_PATH, null, com.appspot.patota_hackathon.api.model.Group.class);
        this.groupName = com.google.api.client.util.Preconditions.checkNotNull(groupName, "Required parameter groupName must be specified.");
      }

      @Override
      public InsertGroup setAlt(java.lang.String alt) {
        return (InsertGroup) super.setAlt(alt);
      }

      @Override
      public InsertGroup setFields(java.lang.String fields) {
        return (InsertGroup) super.setFields(fields);
      }

      @Override
      public InsertGroup setKey(java.lang.String key) {
        return (InsertGroup) super.setKey(key);
      }

      @Override
      public InsertGroup setOauthToken(java.lang.String oauthToken) {
        return (InsertGroup) super.setOauthToken(oauthToken);
      }

      @Override
      public InsertGroup setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (InsertGroup) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public InsertGroup setQuotaUser(java.lang.String quotaUser) {
        return (InsertGroup) super.setQuotaUser(quotaUser);
      }

      @Override
      public InsertGroup setUserIp(java.lang.String userIp) {
        return (InsertGroup) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String groupName;

      /**

       */
      public java.lang.String getGroupName() {
        return groupName;
      }

      public InsertGroup setGroupName(java.lang.String groupName) {
        this.groupName = groupName;
        return this;
      }

      @Override
      public InsertGroup set(String parameterName, Object value) {
        return (InsertGroup) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "patotaAPI.now".
     *
     * This request holds the parameters needed by the api server.  After setting any optional
     * parameters, call the {@link Now#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public Now now() throws java.io.IOException {
      Now result = new Now();
      initialize(result);
      return result;
    }

    public class Now extends ApiRequest<com.appspot.patota_hackathon.api.model.DateBulk> {

      private static final String REST_PATH = "now";

      /**
       * Create a request for the method "patotaAPI.now".
       *
       * This request holds the parameters needed by the the api server.  After setting any optional
       * parameters, call the {@link Now#execute()} method to invoke the remote operation. <p> {@link
       * Now#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected Now() {
        super(Api.this, "POST", REST_PATH, null, com.appspot.patota_hackathon.api.model.DateBulk.class);
      }

      @Override
      public Now setAlt(java.lang.String alt) {
        return (Now) super.setAlt(alt);
      }

      @Override
      public Now setFields(java.lang.String fields) {
        return (Now) super.setFields(fields);
      }

      @Override
      public Now setKey(java.lang.String key) {
        return (Now) super.setKey(key);
      }

      @Override
      public Now setOauthToken(java.lang.String oauthToken) {
        return (Now) super.setOauthToken(oauthToken);
      }

      @Override
      public Now setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Now) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Now setQuotaUser(java.lang.String quotaUser) {
        return (Now) super.setQuotaUser(quotaUser);
      }

      @Override
      public Now setUserIp(java.lang.String userIp) {
        return (Now) super.setUserIp(userIp);
      }

      @Override
      public Now set(String parameterName, Object value) {
        return (Now) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "patotaAPI.registerDevice".
     *
     * This request holds the parameters needed by the api server.  After setting any optional
     * parameters, call the {@link RegisterDevice#execute()} method to invoke the remote operation.
     *
     * @param deviceId
     * @return the request
     */
    public RegisterDevice registerDevice(java.lang.String deviceId) throws java.io.IOException {
      RegisterDevice result = new RegisterDevice(deviceId);
      initialize(result);
      return result;
    }

    public class RegisterDevice extends ApiRequest<Void> {

      private static final String REST_PATH = "registerDevice/{deviceId}";

      /**
       * Create a request for the method "patotaAPI.registerDevice".
       *
       * This request holds the parameters needed by the the api server.  After setting any optional
       * parameters, call the {@link RegisterDevice#execute()} method to invoke the remote operation.
       * <p> {@link RegisterDevice#initialize(com.google.api.client.googleapis.services.AbstractGoogleCl
       * ientRequest)} must be called to initialize this instance immediately after invoking the
       * constructor. </p>
       *
       * @param deviceId
       * @since 1.13
       */
      protected RegisterDevice(java.lang.String deviceId) {
        super(Api.this, "POST", REST_PATH, null, Void.class);
        this.deviceId = com.google.api.client.util.Preconditions.checkNotNull(deviceId, "Required parameter deviceId must be specified.");
      }

      @Override
      public RegisterDevice setAlt(java.lang.String alt) {
        return (RegisterDevice) super.setAlt(alt);
      }

      @Override
      public RegisterDevice setFields(java.lang.String fields) {
        return (RegisterDevice) super.setFields(fields);
      }

      @Override
      public RegisterDevice setKey(java.lang.String key) {
        return (RegisterDevice) super.setKey(key);
      }

      @Override
      public RegisterDevice setOauthToken(java.lang.String oauthToken) {
        return (RegisterDevice) super.setOauthToken(oauthToken);
      }

      @Override
      public RegisterDevice setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (RegisterDevice) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public RegisterDevice setQuotaUser(java.lang.String quotaUser) {
        return (RegisterDevice) super.setQuotaUser(quotaUser);
      }

      @Override
      public RegisterDevice setUserIp(java.lang.String userIp) {
        return (RegisterDevice) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String deviceId;

      /**

       */
      public java.lang.String getDeviceId() {
        return deviceId;
      }

      public RegisterDevice setDeviceId(java.lang.String deviceId) {
        this.deviceId = deviceId;
        return this;
      }

      @Override
      public RegisterDevice set(String parameterName, Object value) {
        return (RegisterDevice) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "patotaAPI.removeMember".
     *
     * This request holds the parameters needed by the api server.  After setting any optional
     * parameters, call the {@link RemoveMember#execute()} method to invoke the remote operation.
     *
     * @param groupId
     * @param content the {@link com.appspot.patota_hackathon.api.model.GroupMember}
     * @return the request
     */
    public RemoveMember removeMember(java.lang.Long groupId, com.appspot.patota_hackathon.api.model.GroupMember content) throws java.io.IOException {
      RemoveMember result = new RemoveMember(groupId, content);
      initialize(result);
      return result;
    }

    public class RemoveMember extends ApiRequest<Void> {

      private static final String REST_PATH = "member/{groupId}";

      /**
       * Create a request for the method "patotaAPI.removeMember".
       *
       * This request holds the parameters needed by the the api server.  After setting any optional
       * parameters, call the {@link RemoveMember#execute()} method to invoke the remote operation. <p>
       * {@link
       * RemoveMember#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param groupId
       * @param content the {@link com.appspot.patota_hackathon.api.model.GroupMember}
       * @since 1.13
       */
      protected RemoveMember(java.lang.Long groupId, com.appspot.patota_hackathon.api.model.GroupMember content) {
        super(Api.this, "POST", REST_PATH, content, Void.class);
        this.groupId = com.google.api.client.util.Preconditions.checkNotNull(groupId, "Required parameter groupId must be specified.");
      }

      @Override
      public RemoveMember setAlt(java.lang.String alt) {
        return (RemoveMember) super.setAlt(alt);
      }

      @Override
      public RemoveMember setFields(java.lang.String fields) {
        return (RemoveMember) super.setFields(fields);
      }

      @Override
      public RemoveMember setKey(java.lang.String key) {
        return (RemoveMember) super.setKey(key);
      }

      @Override
      public RemoveMember setOauthToken(java.lang.String oauthToken) {
        return (RemoveMember) super.setOauthToken(oauthToken);
      }

      @Override
      public RemoveMember setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (RemoveMember) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public RemoveMember setQuotaUser(java.lang.String quotaUser) {
        return (RemoveMember) super.setQuotaUser(quotaUser);
      }

      @Override
      public RemoveMember setUserIp(java.lang.String userIp) {
        return (RemoveMember) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long groupId;

      /**

       */
      public java.lang.Long getGroupId() {
        return groupId;
      }

      public RemoveMember setGroupId(java.lang.Long groupId) {
        this.groupId = groupId;
        return this;
      }

      @Override
      public RemoveMember set(String parameterName, Object value) {
        return (RemoveMember) super.set(parameterName, value);
      }
    }

  }

  /**
   * Builder for {@link Api}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
    }

    /** Builds a new instance of {@link Api}. */
    @Override
    public Api build() {
      return new Api(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link ApiRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setApiRequestInitializer(
        ApiRequestInitializer apiRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(apiRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
